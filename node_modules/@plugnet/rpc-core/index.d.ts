import { ProviderInterface } from '@plugnet/rpc-provider/types';
import { RpcMethod } from '@plugnet/jsonrpc/types';
import { RpcInterface } from './jsonrpc.types';
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Plugnet Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@plugnet/rpc-core';
 * import WsProvider from '@plugnet/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */
export default class Rpc implements RpcInterface {
    private _storageCache;
    readonly provider: ProviderInterface;
    readonly author: RpcInterface['author'];
    readonly chain: RpcInterface['chain'];
    readonly state: RpcInterface['state'];
    readonly system: RpcInterface['system'];
    /**
     * @constructor
     * Default constructor for the Api Object
     * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
     */
    constructor(provider: ProviderInterface);
    /**
     * @name signature
     * @summary Returns a string representation of the method with inputs and outputs.
     * @description
     * Formats the name, inputs and outputs into a human-readable string. This contains the input parameter names input types and output type.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@plugnet/rpc-core';
     *
     * Api.signature({ name: 'test_method', params: [ { name: 'dest', type: 'Address' } ], type: 'Address' }); // => test_method (dest: Address): Address
     * ```
     */
    static signature({ method, params, type }: RpcMethod): string;
    /**
     * @description Manually disconnect from the attached provider
     */
    disconnect(): void;
    private createErrorMessage;
    private createInterface;
    private createMethodSend;
    private createMethodSubscribe;
    private formatInputs;
    private formatOutput;
    private formatStorageData;
    private formatStorageSet;
}
