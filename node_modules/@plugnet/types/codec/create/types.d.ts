import { Codec, InterfaceTypes } from '../../types';
import { InterfaceRegistry } from '../../interfaceRegistry';
export declare type FromReg<T extends Codec, K extends string> = K extends InterfaceTypes ? InterfaceRegistry[K] : T;
export declare enum TypeDefInfo {
    Compact = 0,
    DoubleMap = 1,
    Enum = 2,
    Linkage = 3,
    Option = 4,
    Plain = 5,
    Set = 6,
    Struct = 7,
    Tuple = 8,
    Vec = 9,
    VecFixed = 10,
    Null = 11
}
export interface TypeDefExtVecFixed {
    length: number;
    type: string;
}
export interface TypeDef {
    info: TypeDefInfo;
    index?: number;
    ext?: TypeDefExtVecFixed;
    name?: string;
    type: string;
    sub?: TypeDef | TypeDef[];
}
