import { Address, Call } from '../../../interfaces/runtime';
import { ExtrinsicPayloadValue, IExtrinsicImpl, IKeyringPair, SignatureOptions } from '../../../types';
import { ExtrinsicOptions } from '../types';
import Struct from '../../../codec/Struct';
import ExtrinsicSignatureV1 from './ExtrinsicSignature';
export interface ExtrinsicValueV1 {
    method?: Call;
    signature?: ExtrinsicSignatureV1;
}
/**
 * @name ExtrinsicV1
 * @description
 * The first generation of compact extrinsics
 */
export default class ExtrinsicV1 extends Struct implements IExtrinsicImpl {
    constructor(value?: Uint8Array | ExtrinsicValueV1, { isSigned }?: Partial<ExtrinsicOptions>);
    static decodeExtrinsic(value?: Uint8Array | ExtrinsicValueV1, isSigned?: boolean): ExtrinsicValueV1;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    readonly method: Call;
    /**
     * @description The [[ExtrinsicSignatureV1]]
     */
    readonly signature: ExtrinsicSignatureV1;
    /**
     * @description The version for the signature
     */
    readonly version: number;
    /**
     * @description Add an [[ExtrinsicSignatureV1]] to the extrinsic (already generated)
     */
    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, payload: ExtrinsicPayloadValue | Uint8Array | string): ExtrinsicV1;
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account: IKeyringPair, options: SignatureOptions): ExtrinsicV1;
}
